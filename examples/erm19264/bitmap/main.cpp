/*!
	@file main.cpp
	@author Gavin Lyons
	@brief Test file for ERM19264 library,showing how to draw bitmap
	@test
		-# Test 301 Buffer init  test : Bitmap Vertical addressed,
				can be used when initialising Buffer. Buffer is defined with bitmap data in it.
		-# Test 302 LCDBitmap method test : Bitmap Vertical addressed,
				buffer not used, writes directly to screen, NO Buffer.
		-# Test 303 drawBitmap method test 1/2 :
				Bitmap Data Vertical addressed, call setDrawBitmapAddr(true) to set this mode. Default.
		-# Test 304 drawBitmap method test 2/2 :
				Bitmap Data Horizontal addressed call setDrawBitmapAddr(false) to set this mode
		-# Test 305 small bitmaps
*/

// === Libraries ===
#include "pico/stdlib.h"
#include "hardware/spi.h"
#include "displaylib/bitmap_test_data.hpp"
#include "displaylib/erm19264.hpp"

/// @cond

// Screen settings
#define LCDcontrast 0x49	// Contrast
#define LCDRAMADDRCTRL 0x02 // RAM address control: Range 0-0x07, optional, default 0x02
#define myLCDwidth 192
#define myLCDheight 64
#define myScreenSize (myLCDwidth * (myLCDheight / 8))

// GPIO
const uint mosi_pin = 19;
const uint sck_pin = 18;
const uint cs_pin = 17;
const uint res_pin = 3;
const uint dc_pin = 2;

// SPI configuration
uint32_t mySPIBaudRate = 8000;
spi_inst_t *mySpiInst = spi0;

// instantiate  an LCD object
ERM19264 myLCD(myLCDwidth, myLCDheight);

// 192x64px 192 * 64/8 = 1536 fullscreen bitmap filling the buffer data Vertical addressed
uint8_t screenBuffer[myScreenSize] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0xc0, 0xe0, 0x60, 0x30, 0x30, 0x38, 0x18, 0x18, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x8c, 0x8c, 0x8c, 0x8c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x18, 0x18, 0x38, 0x30, 0x30, 0x60, 0xe0, 0xc0,
	0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0x3e, 0x0f,
	0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
	0x07, 0xff, 0xff, 0xff, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
	0xff, 0xff, 0x01, 0x01, 0x01, 0x00, 0x00, 0xe0, 0xf0, 0xf8, 0x7c, 0x1c, 0x0e, 0x06, 0x03, 0x03,
	0x03, 0x01, 0x01, 0x03, 0x03, 0x02, 0x06, 0x0e, 0x3e, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x04, 0x04, 0x06, 0xfe, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0xe0, 0xf0, 0xf8, 0x1c, 0x0e, 0x06, 0x83, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0xf0, 0xfc, 0x3e, 0x06, 0x03, 0x01, 0x01, 0x01, 0x03, 0x06, 0x3e, 0xfc, 0xf0, 0x80, 0x00,
	0x00, 0xe0, 0xf8, 0xfc, 0x0e, 0x02, 0x01, 0x01, 0x01, 0x01, 0x03, 0x0e, 0xfc, 0xf8, 0xf0, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x03, 0x07, 0x1e, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
	0xff, 0xff, 0x07, 0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0x07, 0x1f, 0xfe, 0xfc, 0xf0, 0x00, 0x00,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00,
	0x00, 0x03, 0x0f, 0x1f, 0x1e, 0x38, 0x30, 0x30, 0x30, 0x30, 0x10, 0xd0, 0xff, 0xff, 0x7f, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x07, 0x1f, 0x3f, 0x3c, 0x70, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x20, 0x30, 0x18,
	0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x0f, 0x1f, 0x3c, 0x38, 0x30, 0x60, 0x60,
	0x60, 0x60, 0x60, 0x60, 0x60, 0x20, 0x20, 0x10, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x40, 0x7f, 0x7f, 0x7f, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x07, 0x1f, 0x3f, 0x38, 0x60, 0x40, 0x40, 0x40, 0x40, 0x20, 0x38, 0x1f, 0x0f, 0x03, 0x00, 0x00,
	0x01, 0x07, 0x1f, 0x3e, 0x30, 0x60, 0x40, 0x40, 0x40, 0x60, 0x30, 0x3e, 0x1f, 0x07, 0x01, 0x00,
	0x00, 0x00, 0x40, 0x40, 0x40, 0x60, 0x20, 0x30, 0x18, 0x1c, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0,
	0xe0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x1e,
	0x38, 0x70, 0xe0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
	0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
	0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xe0, 0x70,
	0x38, 0x1c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// === Function prototypes
void Test301(void); // Init Buffer with full screen buffer
void Test302(void); // LCDBitmap method "lighting symbols"
void Test303(void); // drawBitmap method 1/2 Vertical addressed data Test 3
void Test304(void); // drawBitmap method 2/2 horizontal addressed data Test 4
void Test305(void); // Clock Demo
void ClearScreen(void);
void SetupTest(void);
void EndTest(void);

// === Main ===
int main()
{
	SetupTest();
	Test301();
	Test302();
	ClearScreen();
	Test303();
	ClearScreen();
	Test304();
	ClearScreen();
	Test305();
	ClearScreen();
	EndTest();
}
// === End of main ===

// === Function Space ===
void SetupTest()
{
	stdio_init_all(); // Initialize chosen serial port, default 38400 baud
	busy_wait_ms(750);
	printf("LCD ERM19264::Bitmap test :: Start!\r\n");
	myLCD.LCDSPISetup(mySpiInst, mySPIBaudRate, dc_pin, res_pin, cs_pin, sck_pin, mosi_pin);
	myLCD.LCDinit(LCDcontrast, LCDRAMADDRCTRL);
	if (myLCD.LCDSetBufferPtr(myLCDwidth, myLCDheight, screenBuffer) != DisplayRet::Success)
	{
		printf("SetupTest : ERROR : LCDSetBufferPtr Failed!\r\n");
		while (1)
		{
			busy_wait_ms(1000);
		}
	}							  // Initialize the buffer
	myLCD.LCDFillScreen(0xF0, 0); // splash screen bars
	busy_wait_ms(1000);
}

void EndTest()
{
	myLCD.LCDPowerDown();  // Switch off display
	myLCD.LCDSPIoff(); // Turn off SPI
	printf("LCD ERM19264 :: End\r\n");
}

// Test 301 Init buffer with full screen bitmap on startup
void Test301(void)
{
	myLCD.LCDupdate();
	busy_wait_ms(5000);
	myLCD.LCDclearBuffer(); // Clear active buffer
	myLCD.LCDupdate();
	busy_wait_ms(1000);
}

// Test 302 LCDBitmap write direct to screen
void Test302(void)
{
	myLCD.LCDBitmap(5, 5, 84, 24, lightingImage); // no buffer LCDBitmap draws directly to screen
	busy_wait_ms(5000);
	myLCD.LCDFillScreen(0x00, 0); // Clears screen, no buffer
	busy_wait_ms(1000);	// 'image2 'lighting symbols', 84x24px  data vertical addressed
}

// test (303) Draw a vertically addressed bitmap to screen with drawBitmap method
void Test303(void)
{
	myLCD.LCDclearBuffer();
	myLCD.setDrawBitmapAddr(true); // for Bitmap Data Vertical  addressed
	myLCD.drawBitmap(0, 0, TemperatureImageVa, 16, 16, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawBitmap(30, 20, TemperatureImageVa, 16, 16, ERM19264::BG_COLOR, ERM19264::FG_COLOR);
	myLCD.LCDupdate();
	busy_wait_ms(10000);
}

//   test  304 Draw a Horizontally addressed bitmap to screen with drawBitmap method
void Test304(void)
{
	myLCD.LCDclearBuffer();			// Clear active buffer
	myLCD.setDrawBitmapAddr(false); // for Bitmap Data Horizontal addressed
	myLCD.drawBitmap(40, 10, SunTextImage, 40, 16, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawBitmap(100, 20, SunTextImage, 40, 16, ERM19264::BG_COLOR, ERM19264::FG_COLOR);
	myLCD.LCDupdate();
	busy_wait_ms(10000);
}

void ClearScreen(void)
{
	myLCD.LCDclearBuffer();
	myLCD.LCDupdate();
	busy_wait_ms(2000);
}

void Test305(void)
{
	myLCD.setFont(pFontArialBold);
	unsigned long previousMillis = 0; // will store last time  was updated:
	const long interval = 1000;		  // interval  (milliseconds)
	uint8_t sec = 1;
	uint8_t Hour = 12;
	uint8_t Min = 35;
	uint16_t count = 0;
	char value[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

	myLCD.setDrawBitmapAddr(true); // for Bitmap Data Vertical  addressed
	myLCD.drawBitmap(4, 0, SignalIconVa, 16, 8, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawBitmap(44, 0, BluetoothIconVa, 8, 8, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawBitmap(60, 0, MsgIconVa, 16, 8, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawBitmap(84, 0, GPRSIconVa, 8, 8, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawBitmap(98, 0, AlarmIconVa, 8, 8, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawBitmap(160, 0, BatteryIconVa, 16, 8, ERM19264::FG_COLOR, ERM19264::BG_COLOR);
	myLCD.drawFastHLine(0, 20, 192, ERM19264::FG_COLOR);
	myLCD.drawFastHLine(0, 48, 192, ERM19264::FG_COLOR);
	while (count < 30)
	{
		unsigned long currentMillis = to_ms_since_boot(get_absolute_time());

		if (currentMillis - previousMillis >= interval) // rolls over every interval (1 sec)
		{
			count++;
			previousMillis = currentMillis;
			sec++;
			if (sec == 60)
			{
				Min++;
				sec = 0;
				if (Min == 60)
				{
					Hour++;
					Min = 0;
					if (Hour == 24)
					{
						Hour = 0;
					}
				}
			}

			myLCD.writeChar(16, 32, value[Hour / 10]);
			myLCD.writeChar(32, 32, value[Hour % 10]);
			myLCD.writeChar(48, 32, ':');
			myLCD.writeChar(66, 32, value[Min / 10]);
			myLCD.writeChar(80, 32, value[Min % 10]);
			myLCD.writeChar(96, 32, ':');
			myLCD.writeChar(112, 32, value[sec / 10]);
			myLCD.writeChar(128, 32, value[sec % 10]);
			myLCD.LCDupdate();
		}
	}
}
/// @endcond
